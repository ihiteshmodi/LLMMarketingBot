{"instruction": "What is covered in the section 'Setup'?", "input": "Setup", "output": "We'll need to install the following packages for this guide: If you'd like to trace your runs in LangSmith uncomment and set the following environment variables:\n\n```python\n%\npip install\n-\n-\nupgrade\n-\n-\nquiet langchain\n```\n\n```python\nimport getpass import os\n# os.environ[\"LANGSMITH_TRACING\"] = \"true\"\n# os.environ[\"LANGSMITH_API_KEY\"] = getpass.getpass()\n```"}
{"instruction": "What is covered in the section 'Create a tool'?", "input": "Create a tool", "output": "First, we need to create a tool to call. For this example, we will create a custom tool from a function. For more information on creating custom tools, please see this guide.\n\n```python\nfrom langchain_core\n.\ntools import tool\n@tool def\n\nmultiply\n(\nfirst_int\n:\n\nint\n,\nsecond_int\n:\n\nint\n)\n\n-\n>\n\nint\n:\n\n\"\"\"Multiply two integers together.\"\"\"\n\nreturn first_int\n*\nsecond_int\n```\n\n```python\nprint\n(\nmultiply\n.\nname\n)\nprint\n(\nmultiply\n.\ndescription\n)\nprint\n(\nmultiply\n.\nargs\n)\n```\n\n```python\nmultiply Multiply two integers together.\n{'first_int': {'title': 'First Int', 'type': 'integer'}, 'second_int': {'title': 'Second Int', 'type': 'integer'}}\n```\n\n```python\nmultiply\n.\ninvoke\n(\n{\n\"first_int\"\n:\n\n4\n,\n\n\"second_int\"\n:\n\n5\n}\n)\n```\n\n```python\n20\n```"}
{"instruction": "What is covered in the section 'Chains'?", "input": "Chains", "output": "If we know that we only need to use a tool a fixed number of times, we can create a chain for doing so. Let's create a simple chain that just multiplies user-specified numbers.  One of the most reliable ways to use tools with LLMs is with tool calling APIs (also sometimes called function calling). This only works with models that explicitly support tool calling. You can see which models support tool calling here, and learn more about how to use tool calling in this guide. First we'll define our model and tools. We'll start with just a single tool, multiply. We'll use bind_tools to pass the definition of our tool in as part of each call to the model, so that the model can invoke the tool when appropriate: When the model invokes the tool, this will show up in the AIMessage.tool_calls attribute of the output: Check out the LangSmith trace here. Great! We're able to generate tool invocations. But what if we want to actually call the tool? To do so we'll need to pass the generated tool args to our tool. As a simple example we'll just extract the arguments of the first tool_call: Check out the LangSmith trace here.\n\n```python\npip install -qU \"langchain[openai]\"\n```\n\n```python\nimport getpass import os if\n\nnot os\n.\nenviron\n.\nget\n(\n\"OPENAI_API_KEY\"\n)\n:\nos\n.\nenviron\n[\n\"OPENAI_API_KEY\"\n]\n\n=\ngetpass\n.\ngetpass\n(\n\"Enter API key for OpenAI: \"\n)\nfrom langchain\n.\nchat_models import init_chat_model llm\n=\ninit_chat_model\n(\n\"gpt-4o-mini\"\n,\nmodel_provider\n=\n\"openai\"\n)\n```\n\n```python\nllm_with_tools\n=\nllm\n.\nbind_tools\n(\n[\nmultiply\n]\n)\n```\n\n```python\nmsg\n=\nllm_with_tools\n.\ninvoke\n(\n\"whats 5 times forty two\"\n)\nmsg\n.\ntool_calls\n```\n\n```python\n[{'name': 'multiply',\n'args': {'first_int': 5, 'second_int': 42},\n'id': 'call_8QIg4QVFVAEeC1orWAgB2036',\n'type': 'tool_call'}]\n```\n\n```python\nfrom operator import itemgetter chain\n=\nllm_with_tools\n|\n\n(\nlambda x\n:\nx\n.\ntool_calls\n[\n0\n]\n[\n\"args\"\n]\n)\n\n|\nmultiply chain\n.\ninvoke\n(\n\"What's four times 23\"\n)\n```\n\n```python\n92\n```"}
{"instruction": "What is covered in the section 'Agents'?", "input": "Agents", "output": "Chains are great when we know the specific sequence of tool usage needed for any user input. But for certain use cases, how many times we use tools depends on the input. In these cases, we want to let the model itself decide how many times to use tools and in what order. Agents let us do just this. We'll demonstrate a simple example using a LangGraph agent. See this tutorial for more detail.  Agents are also great because they make it easy to use multiple tools. With an agent, we can ask questions that require arbitrarily-many uses of our tools: Check out the LangSmith trace here.\n\n```python\n!pip install\n-\nqU langgraph\n```\n\n```python\nfrom langgraph\n.\nprebuilt import create_react_agent\n```\n\n```python\n@tool def\n\nadd\n(\nfirst_int\n:\n\nint\n,\nsecond_int\n:\n\nint\n)\n\n-\n>\n\nint\n:\n\n\"Add two integers.\"\n\nreturn first_int\n+\nsecond_int\n@tool def\n\nexponentiate\n(\nbase\n:\n\nint\n,\nexponent\n:\n\nint\n)\n\n-\n>\n\nint\n:\n\n\"Exponentiate the base to the exponent power.\"\n\nreturn base\n**\nexponent tools\n=\n\n[\nmultiply\n,\nadd\n,\nexponentiate\n]\n```\n\n```python\n# Construct the tool calling agent agent\n=\ncreate_react_agent\n(\nllm\n,\ntools\n)\n```\n\n```python\n# Use the agent query\n=\n\n(\n\n\"Take 3 to the fifth power and multiply that by the sum of twelve and \"\n\n\"three, then square the whole result.\"\n)\ninput_message\n=\n\n{\n\"role\"\n:\n\n\"user\"\n,\n\n\"content\"\n:\nquery\n}\nfor step in agent\n.\nstream\n(\n{\n\"messages\"\n:\n\n[\ninput_message\n]\n}\n,\nstream_mode\n=\n\"values\"\n)\n:\nstep\n[\n\"messages\"\n]\n[\n-\n1\n]\n.\npretty_print\n(\n)\n```\n\n```python\n================================ Human Message =================================\nTake 3 to the fifth power and multiply that by the sum of twelve and three, then square the whole result.\n================================== Ai Message ==================================\nTool Calls:\nexponentiate (call_EHGS8gnEVNCJQ9rVOk11KCQH)\nCall ID: call_EHGS8gnEVNCJQ9rVOk11KCQH Args:\nbase: 3 exponent: 5 add (call_s2cxOrXEKqI6z7LWbMUG6s8c)\nCall ID: call_s2cxOrXEKqI6z7LWbMUG6s8c Args:\nfirst_int: 12 second_int: 3\n================================= Tool Message =================================\nName: add 15\n================================== Ai Message ==================================\nTool Calls:\nmultiply (call_25v5JEfDWuKNgmVoGBan0d7J)\nCall ID: call_25v5JEfDWuKNgmVoGBan0d7J Args:\nfirst_int: 243 second_int: 15\n================================= Tool Message =================================\nName: multiply 3645\n================================== Ai Message ==================================\nTool Calls:\nexponentiate (call_x1yKEeBPrFYmCp2z5Kn8705r)\nCall ID: call_x1yKEeBPrFYmCp2z5Kn8705r Args:\nbase: 3645 exponent: 2\n================================= Tool Message =================================\nName: exponentiate 13286025\n================================== Ai Message ==================================\nThe final result of taking 3 to the fifth power, multiplying it by the sum of twelve and three, and then squaring the whole result is **13,286,025**.\n```"}
